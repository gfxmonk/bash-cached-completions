# shells like dash can explode, so we restrict this whole script to just known
# good shells.
[ -n "$PS1" ] || return
[ -n "$BASH_VERSION" -o -n "$ZSH_VERSION" ] || return

if [ -z "$1" ]; then
	_bashcomplete_cached_script="$(dirname "$(readlink -f "$([ -n "${BASH_SOURCE[0]}" ] && echo "${BASH_SOURCE[0]}" || echo "$0")")")/cached-completion"
else
	_bashcomplete_cached_script="$1"
	[ -n "$2" ] && bashcomplete_config_dir="$2"
fi

if [ -z "$_bashcomplete_cached_script" ]; then
	echo "ERROR: please supply a path to the cached-completion init script" 1>&2
	return
fi

[ -n "$bashcomplete_config_dir" ] || bashcomplete_config_dir=~/.config/bashcomplete
export bashcomplete_config_dir
function _bashcomplete_cached_init {
	[ -d $bashcomplete_config_dir ] || return;
	for f in $bashcomplete_config_dir/*.py; do
		local filename=${f##*/}
		local command=${filename/%.py/}
		eval "$1 _bashcomplete_cached $command"
	done
}

if [ -n "$BASH" ]; then
	_bashcomplete_cached_init "complete -F"
	function _bashcomplete_cached {
		COMPREPLY=()
		reply=( $(export BASH; ${_bashcomplete_cached_script} $COMP_CWORD "${COMP_WORDS[@]}" 2>/tmp/bashcomplete.log) )
		COMPREPLY=( $(compgen -W "${reply[*]}" -- "${COMP_WORDS[$COMP_CWORD]}") )
	}
fi

if [ -n "$ZSH_VERSION" ]; then
	_bashcomplete_cached_init "compctl -f -K"
	function _bashcomplete_cached {
		read -cA COMP_WORDS
		read -cn COMP_CWORD
		reply=()
		reply=( $(export ZSH_VERSION; ${_bashcomplete_cached_script} $((COMP_CWORD - 1)) ${COMP_WORDS[@]} 2>/tmp/bashcomplete.log) )
	}
fi
