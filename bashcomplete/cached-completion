#!/usr/bin/env python
import os
import shutil
import imp
import time
import fcntl
import sys
from base64 import b32encode

base_dir = os.environ.get('bashcomplete_config_dir')
cache_dir = os.path.join('/tmp/', 'bashcomplete_cache')

def make_dir(path):
	if not os.path.exists(path):
		os.mkdir(path)

def get_words(command, args):
	make_dir(base_dir)
	make_dir(cache_dir)

	config_path = os.path.join(base_dir, command + '.py')
	f = open(config_path)
	config = None
	sys.path.insert(0, os.path.abspath(os.path.dirname(__file__)))
	sys.path.insert(0, config_path)
	try:
		config = imp.load_module('config', f, config_path, ('.py','r', imp.PY_SOURCE))
	finally:
		f.close()
	
	get_cache_key = getattr(config, 'cache_key', lambda *a: 'root')
	cache_key = get_cache_key(command, args)
	max_age = getattr(config, 'max_age', 60 * 60 * 24)
	blocking = getattr(config, 'blocking', False)
	get_words = config.get_words

	if max_age == 0:
		# never mind with all the forking, just do it synchronously
		words = get_words(command, args)
	else:
		cached_words_path = os.path.join(cache_dir, command, b32encode(cache_key))
		try:
			lastmod = os.stat(cached_words_path).st_mtime
		except OSError:
			lastmod = 0

		if not os.path.exists(cached_words_path):
			make_dir(cache_dir)
			make_dir(os.path.join(cache_dir, command))
			open(cached_words_path, 'w').close()
		
		words = get_cached_words(cached_words_path)
		if lastmod + max_age < time.time():
			child_pid = os.fork()
			if child_pid == 0:
				print >> sys.stderr, "generating new set of words"
				# close off stdout so bash doesn't wait for this child
				sys.stdout.close()
				os.close(1)
				sys.stdout = sys.stderr
				f = open(cached_words_path + '.lck', 'w')
				try:
					fcntl.flock(f.fileno(), fcntl.LOCK_EX | fcntl.LOCK_NB)
				except IOError: os._exit(1)
				new_words = get_words(command, args)
				output = open(cached_words_path, 'w')
				output.writelines((line + '\n' for line in new_words))
				output.close()
				f.close()
				os._exit(0)
			if blocking:
				print >> sys.stderr, "waiting"
				os.waitpid(child_pid, 0)
				words = get_cached_words(cached_words_path)
		
	print >> sys.stderr, "ALL WORDS: " + repr(words)
	return words or []


def get_cached_words(path):
	if not os.path.exists(path): return None
	try:
		f = open(path)
		result = f.readlines()
		f.close()
		return result
	except StandardError:
		return None

def main(idx, command, *args):
	idx = int(idx) - 1
	words = get_words(command, args[:idx+1])
	from bashcomplete import compreply
	print >> sys.stderr, "INPUTS: " + repr((idx, command, args))
	words = words + compreply.concat_colons(words, idx, args)
	print >> sys.stderr, "EXPANDED WORDS: " + repr(words)
	print " ".join(words)

if __name__ == '__main__':
	if sys.argv[1:] == ['__init']:
		init_script = os.path.abspath(os.path.join(os.path.dirname(sys.argv[0]), 'init'))
		completion_script = os.path.abspath(sys.argv[0])
		print "%s %s" % (init_script, completion_script)
		sys.exit(0)
	sys.exit(main(*sys.argv[1:]))
